# ==================================================================================================
# Copyright 2011 Twitter, Inc.
# --------------------------------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this work except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file, or at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==================================================================================================

__author__ = 'Benjy Weinberger'

import os
import sys
import shutil
import tempfile
import subprocess

from twitter.common.dirutil.chroot import RelativeChroot
from twitter.pants.python.egg_builder import EggBuilder

class PythonAntlrBuilder(object):
  """
    Antlr builder.
  """
  class CodeGenerationException(Exception): pass

  def __init__(self, target, root_dir):
    self.target = target
    self.root = root_dir
    self.module = target.module
    distdir = os.path.join(self.root, 'dist')
    self.chroot = RelativeChroot(root_dir, distdir, target.name)
    codegen_root = tempfile.mkdtemp(dir=self.chroot.path(), prefix='codegen.')
    self.codegen_root = os.path.relpath(codegen_root, self.chroot.path())
    self.created_packages = set()
    self.created_namespace_packages = set()

  def __del__(self):
    self.cleanup()

  def packages(self):
    return self.created_packages

  def cleanup(self):
    shutil.rmtree(self.chroot.path())

  def run_antlrs(self, output_dir):
    args = [
        'java',
        '-jar',
        os.path.join(self.root, 'build-support/ivy/lib/ivy-2.2.0.jar'),
        '-settings',
        os.path.join(self.root, 'build-support/ivy/ivysettings.xml'),
        '-dependency',
        'org.antlr',
        'antlr',
        self.target.antlr_version,
        '-types',
        'jar',
        '-main',
        'org.antlr.Tool',
        '--',
        '-fo',
        output_dir]
    for source in self.target.sources:
      abs_path = os.path.abspath(os.path.join(self.root, self.target.target_base, source))
      args.append(abs_path)

    cwd = os.getcwd()
    os.chdir(self.chroot.path())
    print 'PythonAntlrBuilder executing: %s' % ' '.join(args)
    try:
      po = subprocess.Popen(args)
    finally:
      os.chdir(cwd)
    rv = po.wait()
    if rv != 0:
      comm = po.communicate()
      print >> sys.stderr, 'ANTLR generation failed!'
      print >> sys.stderr, 'STDOUT'
      print >> sys.stderr, comm[0]
      print >> sys.stderr, 'STDERR'
      print >> sys.stderr, comm[1]
    return rv == 0

  @staticmethod
  def path_to_module(path):
    return path.replace(os.path.sep, '.')

  def build_egg(self):
    gen_root = os.path.join(self.chroot.path(), self.codegen_root)
    # Create the package structure.
    path = gen_root
    package = ''
    for module_name in self.module.split('.'):
      path = os.path.join(path, module_name)
      if package == '':
        package = module_name
      else:
        package = package + '.' + module_name
      os.mkdir(path)
      with open(os.path.join(path, '__init__.py'), 'w') as f:
        if package != self.module:  # Only write this in the non-leaf modules.
          f.write("__import__('pkg_resources').declare_namespace(__name__)")
          self.created_namespace_packages.add(package)
      self.created_packages.add(package)

    # autogenerate the python files that we bundle up
    self.run_antlrs(path)

    def dump_setup_py(packages, namespace_packages):
      boilerplate = """
from setuptools import setup

setup(name        = "%(target_name)s",
      version     = "dev",
      description = "autogenerated ANTLR parsers for %(target_name)s",
      package_dir = { "": "." },
      packages    = %(packages)s,
      namespace_packages = %(namespace_packages)s)
"""
      boilerplate = boilerplate % {
        'target_name': self.target.name,
        'packages': repr(packages),
        'namespace_packages': repr(list(namespace_packages))
      }

      self.chroot.write(boilerplate, os.path.join(self.codegen_root, 'setup.py'))
    dump_setup_py(self.created_packages, self.created_namespace_packages)

    egg_root = os.path.join(self.chroot.path(), self.codegen_root)
    egg_path = EggBuilder().build_egg(egg_root, self.target)
    return egg_path
