import os
import errno
import sys
import getpass
import zipfile
import zipimport
import runpy
import base64
import hashlib

class LocalFinder:
  def __init__(self, path, nickname):
    self._zipimport = zipimport.zipimporter(path)
    self._nickname  = nickname

  def find_module(self, module_name):
    return self._zipimport.find_module(module_name)

  def load_module(self, module_name):
    return self._zipimport.load_module(module_name)

  def callable(self):
    def fn(nickname):
      if self._nickname == nickname:
        return self
      raise ImportError
    return fn

__EGG_PARSER_TEMPLATE__

def cache_base():
  target_dir = "__PEX_CREATOR_TARGET__"
  username = getpass.getuser()
  return '/var/tmp/%s/%s' % (username, target_dir)

def safe_create_dir(dir):
  try:
    os.makedirs(dir, mode=0700)
  except os.error, e:
    if e.errno != errno.EEXIST:
      print >> sys.stderr, 'Could not initialize python egg cache! reason = %s' % e
      sys.exit(1)
  except Exception, e:
    print >> sys.stderr, 'Could not initialize python egg cache! reason = %s' % e
    sys.exit(1)

def safe_open_for_write(path):
  safe_create_dir(os.path.dirname(path))
  return open(path, 'w')

def setup_cache():
  egg_cache = cache_base()
  safe_create_dir(egg_cache)

def md5s_equal(string1, string2):
  string1_md5 = hashlib.md5()
  string1_md5.update(string1)
  string2_md5 = hashlib.md5()
  string2_md5.update(string2)
  return string1_md5.digest() == string2_md5.digest()

def same(filename, contents):
  if not os.path.exists(filename): return False
  with open(filename, "r") as fp:
    file_contents = fp.read()
  return md5s_equal(file_contents, contents)

def extract_zip():
  egg_content = EGG_B64.replace("\\n", "")
  egg_content = base64.b64decode(egg_content)

  exe_zipfile = "__PEX_CREATOR_ZIPFILE__"
  exe_zipfile = os.path.join(cache_base(), exe_zipfile)

  if same(exe_zipfile, egg_content):
    return

  # MD5's didn't match
  exe_out = file(exe_zipfile, 'w')
  exe_out.write(egg_content)
  exe_out.close()

def get_egg_from_path(path):
  for name in path.split(os.path.sep):
    if name.endswith('.egg'):
      return name
  return None

def extract_deps():
  exe_zipfile = "__PEX_CREATOR_ZIPFILE__"
  exe_zipfile = os.path.join(cache_base(), exe_zipfile)
  zp = zipfile.ZipFile(exe_zipfile)
  egg_cache = cache_base()
  path_adjuncts = []
  for name in zp.namelist():
    if name.startswith('.deps/'):
      eggname = get_egg_from_path(name)
      if eggname is not None and EggParser().is_compatible(eggname):
        egg_in = zp.open(name)
        egg_contents = egg_in.read()
        egg_in.close()

        dest = os.path.join(egg_cache, name)
        eggdest = os.path.join(egg_cache, '.deps', eggname)
        if eggdest not in path_adjuncts:
          path_adjuncts.append(eggdest)
        if same(dest, egg_contents):
          continue

        egg_out = safe_open_for_write(dest)
        egg_out.write(egg_contents)
        egg_out.close()
  zp.close()
  return exe_zipfile, path_adjuncts

__all_symbols = [
  cache_base,
  safe_create_dir,
  safe_open_for_write,
  setup_cache,
  md5s_equal,
  extract_zip,
  same,
  extract_deps
]

def main():
  setup_cache()
  extract_zip()
  exe_zipfile, path_adjuncts = extract_deps()

  # namespace cleanup
  global __all_symbols
  for symbol in __all_symbols:
    del symbol
  del __all_symbols

  sys.path = ['__pants_exe_zipfile__'] + path_adjuncts + sys.path
  sys.path_hooks.insert(0, LocalFinder(exe_zipfile, '__pants_exe_zipfile__').callable())

  if os.getenv('PEX_PROFILING'):
    import cProfile
    cProfile.run("runpy.run_module('__main__')", os.getenv('PEX_PROFILE_OUTPUT'))
  else:
    runpy.run_module('__main__')

if __name__ == '__main__':
  main()
